{
  
    
        "post0": {
            "title": "Hackathon - Cortex seq-FISH + scRNA data - gene selection challenge",
            "content": "Background . This study integrates sequencing and imaging-based single-cell transcriptomic profiling methods. The authors showed that the incorporation of scRNAseq data improved cell-type mapping using seqFISH data analysis alone while including the seqFISH data enabled the identification of spatial structure in the scRNAseq data (Figure from Zhu et al 2018). For our workshop, we focus on a subset of these data that contain matched seqFISH and scRNAseq data for the adult mouse visual cortex. . Key articles . Zhu et al 2018, reference paper for seqFISH is available at: (https://www.nature.com/articles/nbt.4260) . Tasic et al 2016, reference paper for scRNAseq is available at: (https://www.nature.com/articles/nn.4216) . Main . Dependency . python 3 | python packages: scanpy (v1.4.5.1) | numpy (v1.18.1) | pandas (v1.0.1) | matplotlib (v3.1.3) | seaborn (v0.10.1) | scikit-learn (v0.22.1) | yellowbrick (v1.1) | . | . Imports . import pandas as pd import matplotlib.pyplot as plt import seaborn as sns; sns.set() import warnings warnings.filterwarnings(&#39;ignore&#39;) from sklearn import svm from sklearn.metrics import f1_score from sklearn.feature_selection import RFE from yellowbrick.model_selection import RFECV from yellowbrick.model_selection import LearningCurve from yellowbrick.classifier import ConfusionMatrix from yellowbrick.classifier import ClassificationReport from yellowbrick.classifier import PrecisionRecallCurve from yellowbrick.classifier import ClassPredictionError from yellowbrick.classifier import ROCAUC . Define functions . def read_genes(fn): f = open(fn) next(f) genes = [] for l in f: l = l.rstrip(&quot; n&quot;) ll = l.split(&quot; t&quot;) genes.append(ll[0]) f.close() return genes def eva_model(c, n, X, y, X_test, y_test, class_names, outdir): model = svm.LinearSVC(class_weight=&#39;balanced&#39;, dual=False, max_iter=10000, C=c) rfe = RFE(model, n_features_to_select=n) ## learning curve plt.clf() viz_LC = LearningCurve( rfe, scoring=&#39;f1_weighted&#39;, n_jobs=4 ) viz_LC.fit(X, y) viz_LC.show(outpath=outdir + &#39;/LC.png&#39;) ## classification report plt.clf() viz_CR = ClassificationReport(rfe, classes=class_names, support=True) viz_CR.fit(X, y) viz_CR.score(X_test, y_test) viz_CR.show(outpath=outdir + &#39;/CR.png&#39;) ## confusion matrix plt.clf() viz_CM = ConfusionMatrix(rfe, classes=class_names) viz_CM.fit(X, y) viz_CM.score(X_test, y_test) viz_CM.show(outpath=outdir + &#39;/CM.png&#39;) ## precision recall curve plt.clf() viz_PRC = PrecisionRecallCurve(rfe, per_class=True, iso_f1_curves=True, fill_area=False, micro=False, classes=class_names) viz_PRC.fit(X, y) viz_PRC.score(X_test, y_test) viz_PRC.show(outpath=outdir + &#39;/PRC.png&#39;,size=(1080,720)) ## class prediction error plt.clf() viz_CPE = ClassPredictionError( rfe, classes=class_names ) viz_CPE.fit(X, y) viz_CPE.score(X_test, y_test) viz_CPE.show(outpath=outdir + &#39;/CPE.png&#39;) ## ROCAUC plt.clf() viz_RA = ROCAUC(rfe, classes=class_names, size=(1080,720)) viz_RA.fit(X, y) viz_RA.score(X, y) viz_RA.show(outpath=outdir + &#39;/RA.png&#39;) fit = rfe.fit(X,y) y_predict = fit.predict(X_test) f1 = f1_score(y_test, y_predict, average=&#39;weighted&#39;) features_retained_RFE = X.columns[rfe.get_support()].values feature_df =pd.DataFrame(features_retained_RFE.tolist()) feature_df.to_csv(outdir + &#39;/features.csv&#39;, sep=&#39; t&#39;, index=False) return f1 . Read files . #### files ###### ## high variable genes genes_fn = &#39;../rsc/highly_variable_genes.tsv&#39; ## scRNA ## txt file of normalized scRNAseq data for 113 genes x 1723 cells scrna_data_fn = &#39;../rsc/tasic_scRNAseq/tasic_training_b2.txt&#39; ## tsv file of cell type labels for scRNAseq scrna_label_fn = &#39;../rsc/tasic_scRNAseq/tasic_labels.tsv&#39; ## seqFish ## txt file of normalized seqFISH data for 113 genes x 1597 cells seqfish_data_fn = &#39;../rsc/tasic_scRNAseq/seqfish_cortex_b2_testing.txt&#39; ## tsv file of spatial cluster labels and SVM learned cell types for seqFISH seqfish_label_fn = &#39;../rsc/tasic_scRNAseq/seqfish_labels.tsv&#39; ######### read files ########### var_genes = read_genes(genes_fn) scrna_expr = pd.read_csv(scrna_data_fn, sep=&#39; t&#39;, header=None, index_col=0) scrna_label = pd.read_csv(scrna_label_fn, sep=&#39; t&#39;, header=None) seqfish_expr = pd.read_csv(seqfish_data_fn, sep=&#39; t&#39;, header=None, index_col=0) seqfish_label = pd.read_csv(seqfish_label_fn, sep=&#39; t&#39;, header=None) . filter scRNA data to high variable genes . X = scrna_expr.T.reset_index()[var_genes] y = scrna_label[0] X_test = seqfish_expr.T.reset_index()[var_genes] y_test = seqfish_label[2] . store cell type names . class_names = [&#39;Astrocyte&#39;, &#39;Endothelial Cell&#39;, &#39;GABA-ergic Neuron&#39;, &#39;Glutamatergic Neuron&#39;, &#39;Microglia&#39;, &#39;Oligodendrocyte.1&#39;, &#39;Oligodendrocyte.2&#39;, &#39;Oligodendrocyte.3&#39;] . Gene Selection . To find out what is the minimal number of genes needed, we recursively train an SVM classification model using a different number of genes and evaluate the performance using cross-validation. This process is done using function &#39;eva_model&#39; which performs the &#39;Recursive Feature Elimination (RFE)&#39; method. Here we perform and plot the performance of the SVM classification models with different C settings. . c = 1e-6 model = svm.LinearSVC(class_weight=&#39;balanced&#39;, dual=False, max_iter=10000, C=c) viz = RFECV(model, scoring=&#39;f1_weighted&#39;) viz.fit(X, y) viz.show() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x12ccb1908&gt; . c = 1e-3 model = svm.LinearSVC(class_weight=&#39;balanced&#39;, dual=False, max_iter=10000, C=c) viz = RFECV(model, scoring=&#39;f1_weighted&#39;) viz.fit(X, y) viz.show() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x12c12e748&gt; . c = 1 model = svm.LinearSVC(class_weight=&#39;balanced&#39;, dual=False, max_iter=10000, C=c) viz = RFECV(model, scoring=&#39;f1_weighted&#39;) viz.fit(X, y) viz.show() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x12c7240b8&gt; .",
            "url": "https://gooday23.github.io/BIRSBIO2020.seqFISHChallenge.geneSeletction/seqfish/scrna/2020/07/20/BIRS_Biointegration-seqFish_challenge-geneselection.html",
            "relUrl": "/seqfish/scrna/2020/07/20/BIRS_Biointegration-seqFish_challenge-geneselection.html",
            "date": " • Jul 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gooday23.github.io/BIRSBIO2020.seqFISHChallenge.geneSeletction/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://gooday23.github.io/BIRSBIO2020.seqFISHChallenge.geneSeletction/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gooday23.github.io/BIRSBIO2020.seqFISHChallenge.geneSeletction/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}